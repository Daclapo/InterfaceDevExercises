<!DOCTYPE html>
<html lang="es">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>listas</title>

<script>

const nNum=10; // numero de elementos de la lista
const nMax=999; // valor maximo al azar
var lista; // array

function iniciar(){
	var res='<h2>ejemplos de metodos de array</h2>';
	res+='lista (for-push): '+genera1()+'<br/>';
	res+='lista (Array.form): '+genera2()+'<br/>';
	res+='lista (while-push): '+genera3()+'<br/>';
	res+='lista (while-[]): '+genera4()+'<br/>';
	res+='ascendente (sort): '+ascendente()+'<br/>';
	res+='descendente (reverse): '+descendente2()+'<br/>';		
	res+='descendente (sort y espacios): '+descendente()+'<br/>';
	res+='media (reduce): '+media1()+'<br/>';
	res+='media (suma/elementos): '+media2()+'<br/>';
	res+='media (reduce abreviado): '+media3()+'<br/>';
	res+='maximo (apply): '+max1()+'<br/>';
	res+='maximo (sort): '+max2()+'<br/>';	
	res+='minimo (apply): '+min1()+'<br/>';
	res+='minimo (sort): '+min2()+'<br/>';
	res+='suma (reduce): '+suma()+'<br/>';
	res+='filtra entre 0 y 100: '+filtra(0,100)+'<br/>';
	document.write(res);
}
function genera1(){
	lista=[]; // vaciar la lista primero
	for (j=0;j<nNum;j++){
		lista.push(aleatorio(0,nMax));
	}
	console.log(lista);	
	return lista;
}
function genera2(){
	lista=[]; // vaciar porque tengo otros metodos que generan
	// crea la lista con while descendente indexado manual 
	var j=nNum;
	while (j--){
			lista[j]=aleatorio(0,nMax);
	}
	console.log(lista);	
	return lista;
}
function genera3(){
	lista=[];
	// crea la lista con while descendente con push
	var j=nNum;
	while (j--){
		lista.push(aleatorio(0,nMax));
	}
	console.log(lista);	
	return lista;
}
function genera4(){
	lista=[];
	// otra forma de genera un array de 10 valores segundo uso de Array.from
	lista=Array.from({length:10},function(){return aleatorio(0,nMax)});
	console.log(lista);
	return lista;
	// parametro 1 : objeto que genera el array aqui solo el atributo longitud
	// parametro 2 : map function para cada elemento
}
function suma(){
	return lista.reduce((t,v)=>{return t+v;}); // arrow function
}
function media1(){
	return lista.reduce(function(total,value){return total+value;})/lista.length;
}
function media2(){
	var s=0,n=lista.length;
	for (j=0;j<n;j++){s+=lista[j]}
	return (s/n);
}
function media3(){
	return lista.reduce((t,v)=>{return t+v;})/lista.length; // arrow function
}
function min1(){
	return Math.min.apply(null,lista); // (objeto,array)
}
function min2(){
	lista.sort(function(a, b){return b - a});
	return lista[lista.length-1]; // (objeto,array)
}
function max1(){
	return Math.max.apply(null,lista); // (objeto,array)
}
function max2(){
	lista.sort(function(a, b){return b - a});
	return lista[0]; // (objeto,array)
}
function ascendente(){
	lista.sort(function(a, b){return a - b});
	return lista.join(' ');
}
function descendente(){
	lista.sort(function(a, b){return b - a});
	// poner en una cadena para imprimir
	return lista.join(' ');
}
function descendente2(){
	lista.reverse();
	// retorna al array se puede imprimir directamente
	return lista;
}
function filtra(a,b){
	return lista.filter(function(v){return (v>=a&&v<=b)}).join(' ');
}
function aleatorio(a,b) {
	return Math.round(Math.random()*(b-a)+parseInt(a));
}
window.onload = iniciar; 
</script>

</head>
 
<body>
</body>

</html>
